/*
 * Copyright (c) 2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== empty.cfg ========
 */

/* ================ General configuration ================ */
var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
//var FatFS = xdc.useModule('ti.sysbios.fatfs.FatFS');

/* ================ System configuration ================ */
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
System.SupportProxy = SysMin;

/* ================ Logging configuration ================ */
var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');

/* ================ Kernel configuration ================ */
/* Use Custom library */
var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.libType = BIOS.LibType_Custom;
BIOS.logsEnabled = true;
BIOS.assertsEnabled = true;

/* ================ Driver configuration ================ */
var TIRTOS = xdc.useModule('ti.tirtos.TIRTOS');
TIRTOS.useGPIO = true;
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "Sema_lightsense_f";
semaphore0Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.Sema_lightsense_f = Semaphore.create(0, semaphore0Params);
var semaphore1Params = new Semaphore.Params();
semaphore1Params.instance.name = "Sema_lightsense";
semaphore1Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.Sema_lightsense = Semaphore.create(null, semaphore1Params);
var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "Timer2A";
hwi1Params.priority = -1;
hwi1Params.enableInt = true;
Program.global.Timer2A = Hwi.create(39, "&timer2A_ISR", hwi1Params);
var task2Params = new Task.Params();
task2Params.instance.name = "Drive_task";
task2Params.priority = 2;
task2Params.stackSize = 4096;
Program.global.Drive_task = Task.create("&Robot_drive_task", task2Params);
var task2Params0 = new Task.Params();
task2Params0.instance.name = "Lightsense_task";
task2Params0.priority = 1;
task2Params0.stackSize = 4096;
Program.global.Lightsense_task = Task.create("&Robot_lightsnsr_task", task2Params0);
var hwi6Params = new Hwi.Params();
hwi6Params.instance.name = "GPIOA";
hwi6Params.priority = -1;
Program.global.GPIOA = Hwi.create(16, "&gpio_A_ISR", hwi6Params);
var hwi7Params = new Hwi.Params();
hwi7Params.instance.name = "GPIOB";
hwi7Params.priority = -1;
hwi7Params.enableInt = true;
Program.global.GPIOB = Hwi.create(17, "&gpio_B_ISR", hwi7Params);
var hwi8Params = new Hwi.Params();
hwi8Params.instance.name = "GPIOC";
hwi8Params.priority = -1;
hwi8Params.enableInt = true;
Program.global.GPIOC = Hwi.create(18, "&gpio_C_ISR", hwi8Params);
var hwi9Params = new Hwi.Params();
hwi9Params.instance.name = "GPIOD";
hwi9Params.priority = -1;
hwi9Params.enableInt = true;
Program.global.GPIOD = Hwi.create(19, "&gpio_D_ISR", hwi9Params);
var clock0Params = new Clock.Params();
clock0Params.instance.name = "Lightsense_sample_CLK";
clock0Params.period = 5;
clock0Params.startFlag = true;
Program.global.Lightsense_sample_CLK = Clock.create("&lightsense_CLK", 10, clock0Params);
var semaphore3Params = new Semaphore.Params();
semaphore3Params.instance.name = "Sema_lightsense_filter";
semaphore3Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.Sema_lightsense_filter = Semaphore.create(null, semaphore3Params);
var task2Params1 = new Task.Params();
task2Params1.instance.name = "Medianfilter";
task2Params1.priority = 3;
task2Params1.vitalTaskFlag = true;
task2Params1.stackSize = 4096;
Program.global.Medianfilter = Task.create("&median_filter_task", task2Params1);
var hwi5Params = new Hwi.Params();
hwi5Params.instance.name = "WTimer0A";
hwi5Params.enableInt = true;
hwi5Params.priority = -1;
Program.global.WTimer0A = Hwi.create(110, "&Wtimer0A_ISR", hwi5Params);
Task.defaultStackSize = 2048;
var clock1Params = new Clock.Params();
clock1Params.instance.name = "Calibrate_sample_CLK";
clock1Params.period = 10;
clock1Params.startFlag = true;
Program.global.Calibrate_sample_CLK = Clock.create("&calibrate_CLK", 10, clock1Params);
var semaphore3Params0 = new Semaphore.Params();
semaphore3Params0.instance.name = "Sema_GPIOA";
semaphore3Params0.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.Sema_GPIOA = Semaphore.create(0, semaphore3Params0);
BIOS.rtsGateType = BIOS.GateMutex;
var swi0Params = new Swi.Params();
swi0Params.instance.name = "GPIOASWI";
swi0Params.priority = 1;
Program.global.GPIOASWI = Swi.create("&gpio_A_SWI", swi0Params);
var swi1Params = new Swi.Params();
swi1Params.instance.name = "GPIOBSWI";
swi1Params.priority = 3;
Program.global.GPIOBSWI = Swi.create("&gpio_B_SWI", swi1Params);
var swi2Params = new Swi.Params();
swi2Params.instance.name = "GPIOCSWI";
swi2Params.priority = 2;
Program.global.GPIOCSWI = Swi.create("&gpio_C_SWI", swi2Params);
var swi3Params = new Swi.Params();
swi3Params.instance.name = "GPIODSWI";
swi3Params.priority = 4;
Program.global.GPIODSWI = Swi.create("&gpio_D_SWI", swi3Params);
var semaphore4Params = new Semaphore.Params();
semaphore4Params.instance.name = "Sema_GPIOB";
semaphore4Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.Sema_GPIOB = Semaphore.create(null, semaphore4Params);
var semaphore5Params = new Semaphore.Params();
semaphore5Params.instance.name = "Sema_GPIOC";
semaphore5Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.Sema_GPIOC = Semaphore.create(null, semaphore5Params);
var semaphore6Params = new Semaphore.Params();
semaphore6Params.instance.name = "Sema_GPIOD";
semaphore6Params.mode = Semaphore.Mode_BINARY_PRIORITY;
Program.global.Sema_GPIOD = Semaphore.create(null, semaphore6Params);
